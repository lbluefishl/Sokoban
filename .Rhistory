# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Plot dendrogram
plot(hclust_result, labels = movesets, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance")
# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram
plot(dendrogram_result, labels = movesets, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance")
install.packages("dtw")
# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram
plot(dendrogram_result, labels = movesets, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance")
# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram with labels
plot(dendrogram_result, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance", sub = "")
install.packages("dtw")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Display the one-hot encoded movesets
encoded_movesets
# Corrected one-hot encoding
encoded_movesets <- matrix(0, nrow = length(movesets), ncol = 4, dimnames = list(movesets, c("l", "r", "u", "d")))
for (i in seq_along(movesets)) {
moveset_chars <- strsplit(movesets[i], '')[[1]]
encoded_movesets[i, moveset_chars] <- 1
}
# Display the corrected one-hot encoded movesets
encoded_movesets
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram with labels
plot(dendrogram_result, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance", sub = "")
# Assuming movesets is a list of movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Create sequences of moves
move_sequences <- strsplit(movesets, "")
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v)$distance)
# Assuming movesets is a list of movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Create sequences of moves
move_sequences <- strsplit(movesets, "")
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v)$distance)
# Assuming movesets is a character vector of Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Convert movesets to a list of character vectors
move_sequences <- lapply(strsplit(movesets, ""), as.character)
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v)$distance)
# Assuming movesets is a character vector of Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Convert movesets to a list of character vectors
move_sequences <- lapply(strsplit(movesets, ""), as.character)
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v, keep = TRUE, step.pattern = asymmetricP05, method = "none")$distance)
# Assuming movesets is a character vector of Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Convert movesets to a list of character vectors
move_sequences <- lapply(strsplit(movesets, ""), as.character)
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v, keep = TRUE, step.pattern = asymmetricP05, method = "none")$distance)
setwd("/Users/zhuangmy/Projects/Sokoban")
library(readxl)
library(lme4)
library(lmerTest)
data <- read_excel("data.xlsm", sheet = "fully processed")
attach(data)
level <- as.factor(levelNumber)
condition <- as.factor(condition)
id <- as.factor(prolificPID)
for (lvl in unique(level)) {
data_level <- data[level == lvl, ]
contingency_table <- table(data_level$completedLevel, data_level$condition)
rownames(contingency_table) <- c("No", "Yes")
colnames(contingency_table) <- c("no break","non-HIS", "HIS")
chi_square_result <- chisq.test(contingency_table)
cat("Chi-square test for Level", lvl, "\n")
print(chi_square_result)
cat("Contingency Table for Level", lvl, "\n")
print(contingency_table)
}
library(readxl)
library(lme4)
library(lmerTest)
data <- read_excel("data.xlsm", sheet = "test")
library(readxl)
library(lme4)
library(lmerTest)
data <- read_excel("data.xlsm", sheet = "test")
attach(data)
level <- as.factor(levelNumber)
condition <- as.factor(condition)
id <- as.factor(prolificPID)
for (lvl in unique(level)) {
data_level <- data[level == lvl, ]
contingency_table <- table(data_level$completedLevel, data_level$condition)
rownames(contingency_table) <- c("No", "Yes")
colnames(contingency_table) <- c("no break","non-HIS", "HIS")
chi_square_result <- chisq.test(contingency_table)
cat("Chi-square test for Level", lvl, "\n")
print(chi_square_result)
cat("Contingency Table for Level", lvl, "\n")
print(contingency_table)
}
lm -> glmer(completedLevel ~ condition*level + (1|prolificPID))
lm <- glmer(completedLevel ~ condition*level + (1|prolificPID), family="binomial")
summary(lm)
setwd("~/Projects/Sokoban")
library(readxl)
library(lme4)
library(lmerTest)
data <- read_excel("data.xlsm", sheet = "test")
attach(data)
level <- as.factor(levelNumber)
condition <- as.factor(condition)
id <- as.factor(prolificPID)
for (lvl in unique(level)) {
data_level <- data[level == lvl, ]
contingency_table <- table(data_level$completedLevel, data_level$condition)
rownames(contingency_table) <- c("No", "Yes")
colnames(contingency_table) <- c("no break","non-HIS", "HIS")
chi_square_result <- chisq.test(contingency_table)
cat("Chi-square test for Level", lvl, "\n")
print(chi_square_result)
cat("Contingency Table for Level", lvl, "\n")
print(contingency_table)
}
