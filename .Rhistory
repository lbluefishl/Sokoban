plogis(-.68)
plogis(-.68+.56)
plogis(-.82)
plogis(-.82+.56-1.11)
plogis(-.68)
plogis(-.04)
plogis(.5)
plogis(.5-.98)
plogis(.5-1.6-.98)
plogis(.5-1.6-.98+1.12)
plogis(.5-.98-1.6)
plogis(.5-1.6
)
plogis(.5-1.6+1.12-.98)
install.packages('installr')
library("installr")
updateR()
upgradeR()
updateR()
library(lme4)
library(readxl)
library(tidyverse)
library(psych)
library(lmerTest)
library(ggeffects)
data <- read_excel("data.xlsx", sheet = "raw")
setwd("~/projects/Sokoban")
data <- read_excel("data.xlsx", sheet = "raw")
data <- data %>%
mutate(prolificPID = factor(prolificPID),
levelNumber = factor(levelNumber),
condition = recode(condition,
`1` = "No Break",
`2` = "Non-HIS",
`3` = "HIS"
),
condition = factor(condition, levels = c("No Break", "Non-HIS", "HIS"))
)
survey <- read_excel("data.xlsx", sheet = "survey")
##### EXCLUSIONS #####
# Did not complete full study or restarted study
problematic_ids <- data %>%
group_by(prolificPID) %>%
summarise(row_count = n()) %>%
filter(row_count != 3) %>%
pull(prolificPID)
data <- data %>%
filter(!prolificPID %in% problematic_ids)
data <- data %>%
mutate(levelNumber = recode(levelNumber,
`5` = "hard",
`7` = "easy",
`8` = "medium")) %>%
rename(level = levelNumber) %>%
mutate(level = factor(level, levels = c("easy", "medium", "hard")))
main_data <- data %>%
left_join(
survey %>%
select(prolificPID, age, handedness, sex, videoGameHours, smartphoneHours, sokobanFamiliarity, digitalDeviceHours, shortFormVideos, trialOrder, conditionOrder),
by = "prolificPID"
) %>%
filter(
sex %in% c(0, 1), # 1 participant put other
handedness %in% c(0,1), # 5 participants put ambidextrous
prolificPID != "6466190f0491049a32d5b0fc", # this participant put an invalid age (-57)
completedEarly != 1 # include only those who encountered manipulations
) %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Female", "Male")),
handedness = factor(handedness, levels = c(0, 1), labels = c("Left", "Right")),
trialOrder = factor(trialOrder),
conditionOrder = factor(conditionOrder)
)
completed_data <- main_data %>%
filter(completedLevel == 1) %>%
mutate(
durationAfterBreak = as.numeric(durationAfterBreak)
)
with(completed_data, plot(jitter(durationAfterBreak),prolificPID, pch=21, bg="#BEBEBE99", ylim=c(0,0.6)))
with(completed_data, plot(jitter(durationAfterBreak),prolificPID, pch=21, bg="#BEBEBE99", ylim=c(0,200)))
with(completed_data, plot(jitter(condition),durationAfterBreak, pch=21, bg="#BEBEBE99", ylim=c(0,200)))
with(completed_data, plot(condition,durationAfterBreak, pch=21, bg="#BEBEBE99", ylim=c(0,200)))
with(completed_data, plot(condition,jitter(durationAfterBreak), pch=21, bg="#BEBEBE99", ylim=c(0,200)))
with(completed_data, plot(condition,jitter(durationAfterBreak), pch=21, bg="#BEBEBE99", ylim=c(0,200)))
with(completed_data, plot(condition, jitter(durationAfterBreak),
pch=21, bg="#BEBEBE99", ylim=c(0, 0.6)))
with(completed_data, plot(condition, jitter(durationAfterBreak),
pch=21, bg="#BEBEBE99", ylim=c(0, 200)))
with(completed_data, plot(condition, jitter(durationAfterBreak),
pch=21, bg="#BEBEBE99", ylim=c(0, 200)))
# Example forcing a scatterplot
with(completed_data, plot(jitter(as.numeric(factor(condition))),
jitter(durationAfterBreak),
xaxt = 'n', pch = 21, bg = "#BEBEBE99", ylim = c(0, 200)))
# Add the correct category labels to the x-axis
axis(1, at = 1:length(unique(completed_data$condition)), labels = unique(completed_data$condition))
levels <- unique(completed_data$level)
par(mfrow = c(1, length(levels)))  # Adjust layout: 1 row, N columns
for (lvl in level) {
subset_data <- subset(completed_data, level == lvl)
with(subset_data, plot(jitter(as.numeric(factor(condition))),
jitter(durationAfterBreak),
xaxt = 'n', pch = 21, bg = "#BEBEBE99", ylim = c(0, 200),
main = paste("Level:", lvl)))
axis(1, at = 1:length(unique(subset_data$condition)), labels = unique(subset_data$condition))
}
levels <- unique(completed_data$level)
par(mfrow = c(1, length(level)))  # Adjust layout: 1 row, N columns
levels <- unique(completed_data$level)
par(mfrow = c(1, length(levels)))  # Adjust layout: 1 row, N columns
for (lvl in level) {
subset_data <- subset(completed_data, levels == lvl)
with(subset_data, plot(jitter(as.numeric(factor(condition))),
jitter(durationAfterBreak),
xaxt = 'n', pch = 21, bg = "#BEBEBE99", ylim = c(0, 200),
main = paste("Level:", lvl)))
axis(1, at = 1:length(unique(subset_data$condition)), labels = unique(subset_data$condition))
}
levels <- unique(completed_data$level)
par(mfrow = c(1, length(levels)))  # Adjust layout: 1 row, N columns
for (lvl in levels) {
subset_data <- subset(completed_data, levels == lvl)
with(subset_data, plot(jitter(as.numeric(factor(condition))),
jitter(durationAfterBreak),
xaxt = 'n', pch = 21, bg = "#BEBEBE99", ylim = c(0, 200),
main = paste("Level:", lvl)))
axis(1, at = 1:length(unique(subset_data$condition)), labels = unique(subset_data$condition))
}
ggplot(completed_data, aes(x = condition, y = durationAfterBreak)) +
geom_jitter(width = 0.2, height = 0.02, shape = 21, fill = "#BEBEBE99") +
ylim(0, 0.6) +
facet_wrap(~ level) +
theme_minimal()
ggplot(completed_data, aes(x = condition, y = durationAfterBreak)) +
geom_jitter(width = 0.2, height = 0.02, shape = 21, fill = "#BEBEBE99") +
ylim(0, 200) +
facet_wrap(~ level) +
theme_minimal()
model_base <- glmer(completedLevel ~  level * condition + (1|prolificPID), family="binomial", control = glmerControl(optimizer = "bobyqa"), data = main_data)
model_none <- glmer(completedLevel ~  level + (1|prolificPID), family="binomial", control = glmerControl(optimizer = "bobyqa"), data = main_data)
anova(model_base,model_none)
lm_base <- lmer(durationAfterBreak ~  level * condition + (1|prolificPID), data = completed_data)
lm_level <- lmer(durationAfterBreak ~  level  + (1|prolificPID), data = completed_data)
anova(lm_base, lm_level)
summary(lm_level)
summary(lm_base)
lm_base <- lmer(durationAfterBreak ~  level * condition, data = completed_data)
lm_none <- lm(durationAfterBreak ~  level * condition, data = completed_data)
anova(lm_none,lm_base)
install.packages("rmarkdown")
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
summary(cars)
