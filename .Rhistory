# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Plot dendrogram
plot(hclust_result, labels = movesets, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance")
# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram
plot(dendrogram_result, labels = movesets, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance")
install.packages("dtw")
# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram
plot(dendrogram_result, labels = movesets, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance")
# Install and load the 'dtw' package
install.packages("dtw")
library(dtw)
# Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram with labels
plot(dendrogram_result, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance", sub = "")
install.packages("dtw")
# One-hot encode movesets
encoded_movesets <- sapply(movesets, function(moveset) sapply(c("l", "r", "u", "d"), function(move) as.numeric(move %in% strsplit(moveset, '')[[1]])))
# Display the one-hot encoded movesets
encoded_movesets
# Corrected one-hot encoding
encoded_movesets <- matrix(0, nrow = length(movesets), ncol = 4, dimnames = list(movesets, c("l", "r", "u", "d")))
for (i in seq_along(movesets)) {
moveset_chars <- strsplit(movesets[i], '')[[1]]
encoded_movesets[i, moveset_chars] <- 1
}
# Display the corrected one-hot encoded movesets
encoded_movesets
# Calculate DTW distances
dtw_distances <- proxy::dist(as.matrix(encoded_movesets), method = function(u, v) dtw::dtw(u, v)$distance)
# Perform hierarchical clustering using DTW distances
hclust_result <- hclust(dtw_distances, method = "ward.D2")
# Convert the result to a dendrogram
dendrogram_result <- as.dendrogram(hclust_result)
# Plot dendrogram with labels
plot(dendrogram_result, main = "Hierarchical Clustering with DTW", xlab = "Movesets", ylab = "Distance", sub = "")
# Assuming movesets is a list of movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Create sequences of moves
move_sequences <- strsplit(movesets, "")
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v)$distance)
# Assuming movesets is a list of movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Create sequences of moves
move_sequences <- strsplit(movesets, "")
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v)$distance)
# Assuming movesets is a character vector of Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Convert movesets to a list of character vectors
move_sequences <- lapply(strsplit(movesets, ""), as.character)
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v)$distance)
# Assuming movesets is a character vector of Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Convert movesets to a list of character vectors
move_sequences <- lapply(strsplit(movesets, ""), as.character)
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v, keep = TRUE, step.pattern = asymmetricP05, method = "none")$distance)
# Assuming movesets is a character vector of Sokoban movesets
movesets <- c("lrllrl", "lrullrulr", "lrllruulr", "lrlrudud", "rrllrlud", "llru", "llruu", "llrulul", "llrludddr", "rrudud")
# Convert movesets to a list of character vectors
move_sequences <- lapply(strsplit(movesets, ""), as.character)
# Calculate DTW distances between sequences
dtw_distances <- proxy::dist(move_sequences, method = function(u, v) dtw::dtw(u, v, keep = TRUE, step.pattern = asymmetricP05, method = "none")$distance)
data <- read_excel("data.xlsx", sheet = "P3B")
library(readxl)
library(lme4)
library(lmerTest)
library(ggeffects)
library(ggplot2)
data <- read_excel("data.xlsx", sheet = "P3B")
setwd("~/Projects/Sokoban")
library(readxl)
library(lme4)
library(lmerTest)
library(ggeffects)
library(ggplot2)
data <- read_excel("data.xlsx", sheet = "P3B")
#remove participants that did not make any moves, either before or after break
data <- data[data$novel != 3, ]
attach(data)
level <- as.factor(levelNumber)
levels(level) <- c("hard", "easy", "medium")
level <- factor(level, levels = c("easy", "medium", "hard"))
condition <- as.factor(condition)
levels(condition) <- c("No Break", "Non-HIS Break", "HIS Break")
id <- as.factor(prolificPID)
novel <- as.factor(novel)
for (lvl in unique(level)) {
data_level <- data[level == lvl, ]
contingency_table <- table(data_level$novel, data_level$condition)
rownames(contingency_table) <- c("No", "Yes")
colnames(contingency_table) <- c("no break","non-HIS", "HIS")
chi_square_result <- chisq.test(contingency_table)
cat("Chi-square test for Level", lvl, "\n")
print(chi_square_result)
cat("Contingency Table for Level", lvl, "\n")
print(contingency_table)
}
lm <- glmer(novel ~ condition * level + (1 | id), family = "binomial")
summary(lm)
lm <- glmer(novel ~ condition * level + beforeLenght + (1 | id), family = "binomial")
lm <- glmer(novel ~ condition * level + beforeLength + (1 | id), family = "binomial")
lm <- glmer(novel ~ condition * level + lengthBefore + (1 | id), family = "binomial")
summary(lm)
summary(lm)
summary(lm)
predictions <- ggpredict(lm, terms = c("level", "condition")) |> plot(colors = "bw")
plot(predictions) +
labs(title = "",
x = "Level Difficulty", y = "Predicted Probability of New Strategy")
plot(predictions) +
labs(title = "",
x = "Level Difficulty", y = "Predicted Probability of New Strategy") +
scale_y_continuous(limits = c(0, 1), labels = scales::percent)
base_plot <- ggplot() +
labs(title = "",
x = "Level Difficulty",
y = "Predicted Probability of New Strategy") +
scale_y_continuous(limits = c(0, 1), labels = scales::percent)
base_plot +
geom_point(data = predictions, aes(x = Level, y = Probability)) +
geom_errorbar(data = predictions, aes(x = Level, ymin = Lower, ymax = Upper))
base_plot +
geom_point(data = predictions, aes(x = Level, y = Probability)) +
base_plot +
geom_point(data = predictions, aes(x = Level, y = Probability))
pred_plot <- plot(predictions)
# Add the layers from the predictions plot onto the base plot
base_plot + pred_plot$layers
plot(predictions) +
labs(title = "",
x = "Level Difficulty", y = "Predicted Probability of New Strategy")
lm2 <- glmer(completedLevel ~ novel + (1|id), family = "binomial")
lm3 <- glmer(completedLevel ~ novel2 + (1|id), family = "binomial")
summary(lm2)
summary(lm3)
library(readxl)
library(lme4)
library(lmerTest)
library(ggeffects)
library(ggplot2)
library(readxl)
library(lme4)
library(lmerTest)
library(ggeffects)
library(ggplot2)
data <- read_excel("data.xlsx", sheet = "P3B")
#remove participants that did not make any moves, either before or after break
data <- data[data$novel != 3, ]
data <- data[data$sex == 2, ]
data <- data[data$handedness == 3, ]
data <- read_excel("data.xlsx", sheet = "P3B")
#remove participants that did not make any moves, either before or after break
data <- data[data$novel != 3, ]
data <- data[data$sex != 2, ]
data <- data[data$handedness != 3, ]
attach(data)
level <- as.factor(levelNumber)
levels(level) <- c("hard", "easy", "medium")
level <- factor(level, levels = c("easy", "medium", "hard"))
condition <- as.factor(condition)
levels(condition) <- c("No Break", "Non-HIS Break", "HIS Break")
id <- as.factor(prolificPID)
novel <- as.factor(novel)
sex <- as.factor(sex)
handedness <- as.factor(handedness)
lm <- glmer(novel ~ condition * level + sex + handedness + (1 | id), family = "binomial")
data <- read_excel("data.xlsx", sheet = "P3B")
#remove participants that did not make any moves, either before or after break
data <- data[data$novel != 3, ]
data <- data[data$sex != 2, ]
data <- data[data$handedness != 3, ]
attach(data)
level <- as.factor(levelNumber)
levels(level) <- c("hard", "easy", "medium")
level <- factor(level, levels = c("easy", "medium", "hard"))
condition <- as.factor(condition)
levels(condition) <- c("No Break", "Non-HIS Break", "HIS Break")
id <- as.factor(prolificPID)
novel <- as.factor(novel)
sex <- as.factor(sex)
handedness <- as.factor(handedness)
lm <- glmer(novel ~ condition * level + sex + handedness + (1 | id), family = "binomial")
summary(lm)
library(arm)
invlogit(-.68)
invlogit(-1.5)
for (lvl in unique(level)) {
data_level <- data[level == lvl, ]
contingency_table <- table(data_level$novel, data_level$condition)
rownames(contingency_table) <- c("No", "Yes")
colnames(contingency_table) <- c("no break","non-HIS", "HIS")
chi_square_result <- chisq.test(contingency_table)
cat("Chi-square test for Level", lvl, "\n")
print(chi_square_result)
cat("Contingency Table for Level", lvl, "\n")
print(contingency_table)
}
setwd("~/Projects/Sokoban")
library(readxl)
library(lme4)
library(lmerTest)
library(ggeffects)
library(ggplot2)
data <- read_excel("data.xlsx", sheet = "P3B")
#remove participants that did not make any moves, either before or after break
data <- data[data$novel != 3, ]
data <- data[data$sex != 2, ]
data <- data[data$handedness != 3, ]
attach(data)
level <- as.factor(levelNumber)
levels(level) <- c("hard", "easy", "medium")
level <- factor(level, levels = c("easy", "medium", "hard"))
condition <- as.factor(condition)
levels(condition) <- c("No Break", "Non-HIS Break", "HIS Break")
id <- as.factor(prolificPID)
novel <- as.factor(novel)
sex <- as.factor(sex)
handedness <- as.factor(handedness)
for (lvl in unique(level)) {
data_level <- data[level == lvl, ]
contingency_table <- table(data_level$novel, data_level$condition)
rownames(contingency_table) <- c("No", "Yes")
colnames(contingency_table) <- c("no break","non-HIS", "HIS")
chi_square_result <- chisq.test(contingency_table)
cat("Chi-square test for Level", lvl, "\n")
print(chi_square_result)
cat("Contingency Table for Level", lvl, "\n")
print(contingency_table)
}
lm <- glmer(novel ~ condition * level + (1 | id), family = "binomial")
summary(lm)
lm2 <- glmer(completedLevel ~ novel + (1|id), family = "binomial")
summary(lm2)
lm3 <- glmer(completedLevel ~ novel1 + (1|id), family = "binomial")
novel1 <- as.factor(novel1)
novel2 <- as.factor(novel2)
lm3 <- glmer(completedLevel ~ novel2 + (1|id), family = "binomial")
summary(lm3)
summary(lm)
lm <- glmer(novel ~ condition * level + lengthBefore+ (1 | id), family = "binomial")
summary(lm)
plogis(2)
plogis(1)
plogis(.6)
plogis(.3)
lm2 <- glmer(completedLevel ~ novel + lengthBefore + (1|id), family = "binomial")
summary(lm2)
lm2 <- glmer(completedLevel ~ novel2 + lengthBefore + (1|id), family = "binomial")
summary(lm2)
lm2 <- glmer(completedLevel ~ novel*level + lengthBefore + (1|id), family = "binomial")
summary(lm2)
